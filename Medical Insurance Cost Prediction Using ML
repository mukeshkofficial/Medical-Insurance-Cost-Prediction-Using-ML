{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mukeshkumardas/Medical-Insurance-Cost-Prediction-Using-ML/blob/main/Medical%20Insurance%20Cost%20Prediction%20Using%20ML\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **1. Importing Packages**"
      ],
      "metadata": {
        "id": "HPkEXrN5uFi6"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RWXGwXjxjiXa"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import r2_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wckcpql7C5-3"
      },
      "outputs": [],
      "source": [
        "insurance_dataset = pd.read_csv('/content/insurance.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "tQD27YZwC76x",
        "outputId": "04f5b06a-342d-4e16-b4b6-32175987a0ad"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age     sex     bmi  children smoker     region      charges\n",
              "0   19  female  27.900         0    yes  southwest  16884.92400\n",
              "1   18    male  33.770         1     no  southeast   1725.55230\n",
              "2   28    male  33.000         3     no  southeast   4449.46200\n",
              "3   33    male  22.705         0     no  northwest  21984.47061\n",
              "4   32    male  28.880         0     no  northwest   3866.85520"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e6b89a00-fd73-46c6-b8cb-d3f262ddabc4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6b89a00-fd73-46c6-b8cb-d3f262ddabc4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e6b89a00-fd73-46c6-b8cb-d3f262ddabc4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e6b89a00-fd73-46c6-b8cb-d3f262ddabc4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e7ef93bb-dee2-4051-a5b0-a12f080f3e16\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e7ef93bb-dee2-4051-a5b0-a12f080f3e16')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e7ef93bb-dee2-4051-a5b0-a12f080f3e16 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "insurance_dataset.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4T4JLYLeC8o9",
        "outputId": "12d11749-5f56-40be-93ef-08f62b3109e3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1338, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "insurance_dataset.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DLFRWmcLC-H4",
        "outputId": "7ff0b406-04dd-479b-fe35-c60279853f68"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1338 entries, 0 to 1337\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       1338 non-null   int64  \n",
            " 1   sex       1338 non-null   object \n",
            " 2   bmi       1338 non-null   float64\n",
            " 3   children  1338 non-null   int64  \n",
            " 4   smoker    1338 non-null   object \n",
            " 5   region    1338 non-null   object \n",
            " 6   charges   1338 non-null   float64\n",
            "dtypes: float64(2), int64(2), object(3)\n",
            "memory usage: 73.3+ KB\n"
          ]
        }
      ],
      "source": [
        "insurance_dataset.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "L41R0pQ3C_UG",
        "outputId": "0a47a70b-00a4-4d72-80bc-5de8522dcb67"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               age          bmi     children       charges\n",
              "count  1338.000000  1338.000000  1338.000000   1338.000000\n",
              "mean     39.207025    30.663397     1.094918  13270.422265\n",
              "std      14.049960     6.098187     1.205493  12110.011237\n",
              "min      18.000000    15.960000     0.000000   1121.873900\n",
              "25%      27.000000    26.296250     0.000000   4740.287150\n",
              "50%      39.000000    30.400000     1.000000   9382.033000\n",
              "75%      51.000000    34.693750     2.000000  16639.912515\n",
              "max      64.000000    53.130000     5.000000  63770.428010"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc30f4c4-7790-48b3-816d-957d6205f33c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1338.000000</td>\n",
              "      <td>1338.000000</td>\n",
              "      <td>1338.000000</td>\n",
              "      <td>1338.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>39.207025</td>\n",
              "      <td>30.663397</td>\n",
              "      <td>1.094918</td>\n",
              "      <td>13270.422265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>14.049960</td>\n",
              "      <td>6.098187</td>\n",
              "      <td>1.205493</td>\n",
              "      <td>12110.011237</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>15.960000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1121.873900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>27.000000</td>\n",
              "      <td>26.296250</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4740.287150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>39.000000</td>\n",
              "      <td>30.400000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9382.033000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>51.000000</td>\n",
              "      <td>34.693750</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>16639.912515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>64.000000</td>\n",
              "      <td>53.130000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>63770.428010</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc30f4c4-7790-48b3-816d-957d6205f33c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc30f4c4-7790-48b3-816d-957d6205f33c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc30f4c4-7790-48b3-816d-957d6205f33c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-24bed5ff-7e71-48d7-ac84-512f27c105f8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24bed5ff-7e71-48d7-ac84-512f27c105f8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-24bed5ff-7e71-48d7-ac84-512f27c105f8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "insurance_dataset.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "UyoqgsvoDA2v",
        "outputId": "94aee04b-6e4c-4a9d-aff6-752d1353e917"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Figure size 300x300 with 0 Axes>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x300 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(3,3))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 672
        },
        "id": "S96ekfKADCh1",
        "outputId": "8bb66845-a150-4cf0-8aa9-ac8895f36bff"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-42-273f2b23e7dc>:1: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(insurance_dataset['age'])\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='age', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.distplot(insurance_dataset['age'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8gefuGqoDD4D",
        "outputId": "660478fa-25dc-4f28-e4e7-efcb88489e73"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18    69\n",
              "19    68\n",
              "50    29\n",
              "51    29\n",
              "47    29\n",
              "46    29\n",
              "45    29\n",
              "20    29\n",
              "48    29\n",
              "52    29\n",
              "22    28\n",
              "49    28\n",
              "54    28\n",
              "53    28\n",
              "21    28\n",
              "26    28\n",
              "24    28\n",
              "25    28\n",
              "28    28\n",
              "27    28\n",
              "23    28\n",
              "43    27\n",
              "29    27\n",
              "30    27\n",
              "41    27\n",
              "42    27\n",
              "44    27\n",
              "31    27\n",
              "40    27\n",
              "32    26\n",
              "33    26\n",
              "56    26\n",
              "34    26\n",
              "55    26\n",
              "57    26\n",
              "37    25\n",
              "59    25\n",
              "58    25\n",
              "36    25\n",
              "38    25\n",
              "35    25\n",
              "39    25\n",
              "61    23\n",
              "60    23\n",
              "63    23\n",
              "62    23\n",
              "64    22\n",
              "Name: age, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ],
      "source": [
        "insurance_dataset['age'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "MKOca5v6DFbZ",
        "outputId": "b8bd11a4-b2fd-4e41-b2b5-0753fa187d06"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(2,3))\n",
        "sns.countplot(x='sex', data=insurance_dataset)\n",
        "plt.title('Sex')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uScpFhgSDHYk",
        "outputId": "850b1c9f-e351-47cc-9b50-ac23362aa666"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "male      676\n",
              "female    662\n",
              "Name: sex, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "insurance_dataset['sex'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "pDvHvtuFDQpE",
        "outputId": "bcd8b80a-5470-474d-891a-8a2d068e08fa"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 200x300 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(2,3))\n",
        "sns.displot(insurance_dataset['bmi'])\n",
        "plt.title('BMI')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XYhOlnFWDU0g",
        "outputId": "a21adfae-18f9-4361-a068-d7647897913e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32.300    13\n",
              "28.310     9\n",
              "30.495     8\n",
              "30.875     8\n",
              "31.350     8\n",
              "          ..\n",
              "46.200     1\n",
              "23.800     1\n",
              "44.770     1\n",
              "32.120     1\n",
              "30.970     1\n",
              "Name: bmi, Length: 548, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "\n",
        "insurance_dataset['bmi'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "D1kmO9jEDVkj",
        "outputId": "fde680f2-d7d5-4271-fd63-24e006c3db74"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiYAAAIsCAYAAADGVWIgAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA3BUlEQVR4nO3dfVzUdb7//+cMiJEyoP6UVtEETPKChG4d0RXZ48XmghS7la65i21bauUlZztHY70sV6ujK+bVJtqFWifNbG2LWM1cSdd1Tx2rtSwvwLxowUqdAcSAmfn94Y35NgsmDCPzRh73263bNvN5z4fXZ24mj/3MZ2YsbrfbLQAAAANYAz0AAABADcIEAAAYgzABAADGIEwAAIAxCBMAAGAMwgQAABiDMAEAAMYgTAAAgDEIEwAAYAzCBEBAxMXF6fHHH7/iuq1btyouLk6nTp3y3JeZmanMzMwrPnb//v2Ki4vT/v37GzUrgKYTHOgBAFx7Tpw4obVr12rv3r06c+aMWrVqpZ49eyo1NVU///nPdd111wV6RACGIkwA+NVf/vIXTZs2TSEhIcrIyFDPnj1VVVWlDz74QP/93/+to0eP6oknnqj3/jIyMjRy5EiFhIRcxakBmIIwAeA3J0+eVFZWljp37qwXX3xRnTp18mz7xS9+oS+++EJ/+ctfGrTPoKAgBQUF+XlSbxUVFQoNDb2qPwNA/XCNCQC/Wbt2rS5cuKDf/e53XlFS48Ybb9R9993ndd8777yj9PR09e3bVyNHjlRBQYHX9rquMalLcXGxHnnkESUkJGjgwIFauHChKisra63LzMxUenq6Dh48qF/84hfq16+ffv/730uSKisr9cwzz+jHP/6x+vbtqx/96Ed6+umna+2n5vqYK80OoOE4YwLAb3bt2qWuXbvq1ltvrdf6Dz74QNu3b9fYsWPVpk0bbdiwQVOnTtWuXbvUrl27ev/cixcv6r777tM///lPZWZmqlOnTtq2bZv+9re/1bn+/PnzGj9+vEaOHKk777xTHTp0kMvl0sMPP6wPPvhAo0ePVmxsrA4fPqwXX3xRx48f16pVq67K7AC8ESYA/KKsrEwlJSUaNmxYvR9z7Ngx5eXlqVu3bpKkpKQkZWRk6K233tIvf/nLeu9n06ZNOn78uHJycpSamipJGj16tDIyMupc/9VXX2n+/PkaM2aM575t27bpr3/9qzZs2KDbbrvNc/9NN92kuXPn6v/+7/+8gstfswPwxks5APyirKxMktSmTZt6P+aHP/yh5xe7JN18881q27atTp482aCfXVBQoI4dO+onP/mJ577Q0FCNHj26zvUhISG66667vO7Lz89XbGysYmJidPbsWc8/AwYMkKRabzn21+wAvHHGBIBftG3bVpJUXl5e78f84Ac/qHVfeHi4HA5Hg3726dOndeONN8pisXjdHx0dXef6yMjIWu/y+eKLL3Ts2DENHDiwzsd88803Xrf9NTsAb4QJAL9o27atOnXqpCNHjtT7MZd7t43b7fbXWHWq63NUXC6Xevbsqccee6zOx9xwww1etwM1O3CtI0wA+M2QIUO0adMmHThwQImJiU32c7t06aLDhw/L7XZ7nTUpKiqq9z66deumzz77TAMHDqx15gVA0+EaEwB+8+CDD+r666/XrFmz9PXXX9fafuLECb344ot+/7kpKSk6c+aM8vPzPfdVVFRo8+bN9d5HamqqSkpK6nzMxYsXdeHCBb/MCuD7ccYEgN9069ZNixcvVlZWltLS0jyf/FpZWakDBw4oPz+/1kWn/jB69Gi99NJLmjFjhj755BN17NhR27Zta9BH32dkZOjtt9/W3LlztX//ft16661yOp0qLCxUfn6+1q5dq/j4eL/PDsAbYQLAr4YNG6Y33nhD69at086dO/U///M/CgkJUVxcnGbOnHnZd8o0RmhoqF544QU98cQT2rhxo6677jrdcccdSklJ0YMPPlivfVitVq1cuVIvvPCCtm3bph07dig0NFRRUVHKzMy87IW0APzL4uZKLQAAYAiuMQEAAMYgTAAAgDEIEwAAYAwjw+T111/XT3/6U8XHxyspKUkPPvigLl686Nn+7rvv6s4771R8fLxGjBih1157rdY+Kisr9dRTT2nQoEFKSEjQ/fffr8LCwqY8DAAA0EDGhcnq1av1xBNPKC0tTevWrdPjjz+uqKgoOZ1OSdL777+vyZMnKyEhQbm5uUpNTdVvf/tbr88vkKQFCxbo1VdfVVZWlpYvX67Kykr96le/UmlpaSAOCwAA1INR78opLCzUHXfcoVWrVulHP/pRnWseeOABlZeX65VXXvHc95vf/EaHDh1SXl6eJKm4uFhDhw7V3Llz9fOf/1zSpa85HzJkiB555BGNHz/+6h8MAABo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lNSIiorSzJkzrxgPAAAA3+VzmOzevVtTp05V586dlZWV5fn01WPHjmnz5s2aMmWK/vCHPyglJcVvwwIAgGubz2GyatUqxcXF6aWXXtL111/vuX/YsGH65S9/qbFjx2rlypWECQAAqDefPw/7888/109/+lOvKKlx/fXX62c/+5k+//zzRg0HAABaFp/DpHXr1t/7vTN2u12tW7f2dfcAAKAF8jlMkpKStH79eh04cKDWto8++kgbNmzw6Qv8AABAy+XzNSb/+Z//qTFjxmjs2LG65ZZbFB0dLUkqKirSxx9/rA4dOujRRx/126AAAODa5/MZk65du+qNN95QZmam7Ha78vLylJeXJ7vdrnHjxmnbtm2ej4gHAACoD5/PmFRXV6t169bKzs5WdnZ2re1lZWWqrq5WcPBV+wJjAABwjfH5jMmCBQu+93tn7r33Xj355JO+7h4AALRAPofJe++9pxEjRlx2+4gRI1RQUODr7gEAQAvkc5icOXNGkZGRl93eqVMnlZSU+Lp7AADQAvkcJhERESoqKrrs9mPHjqlt27a+7h4AALRAPofJ4MGD9corr+jTTz+tte2TTz7R5s2b+Th6AADQID6/ZWbatGl67733NGrUKA0dOlQ9evSQJB05ckS7du1S+/btNW3aNL8NCgAArn0+h0lkZKRee+01LVmyRDt37tSOHTskSW3bttUdd9yhrKys770GBQAA4F816kNGOnXqpKeeekput1tnz56VJLVv314Wi8UvwwEAgJbFL59+ZrFY1KFDB3/sCgAAtGA+X/wKAADgb4QJAAAwBmECAACMQZgAAABjECYAAMAYhAkAADAGYQIAAIxBmAAAAGMQJgAAwBiECQAAMAZhAgAAjEGYAAAAYxAmAADAGIQJAAAwBmECAACMQZgAAABjECYAAMAYhAkAADAGYQIAAIxBmAAAAGMEB3oAAL6xWi2yWi2BHqPJuVxuuVzuQI8B4CohTIBmyGq1KKJdqIKsQYEepck5XU6dP1dBnADXKMIEaIasVouCrEF6dvd6fWkvCfQ4TaZzeKQm/micrFYLYQJcowgToBn70l6iL745FegxAMBvuPgVAAAYgzABAADGIEwAAIAxCBMAAGAMwgQAABiDMAEAAMYgTAAAgDEIEwAAYAzCBAAAGIMwAQAAxiBMAACAMQgTAABgDMIEAAAYgzABAADG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DrVv395z369+9Sv94Ac/0GuvveZ5WWfs2LG69957tXjx4lph4q/ZAdTGSzkA/Mblcumdd97RkCFDvKKkRs0vckkaPXq01+3bbrtNTqdTp0+frvfPO3PmjA4dOqSf/exnXkEwaNAg9ejRo87H3H777V5Rcv78ef3tb39TamqqysrKdPbsWZ09e1bnzp1TcnKyjh8/rpKSEq99+GN2AHXjjAkAvzl79qzKysp00003XXFt586dvW7bbDZJksPhqPfP+/LLLyVJN954Y61t0dHR+vTTT2vdHxUV5XX7xIkTcrvdWrZsmZYtW1bnz/nmm28UGRnp19kB1I0wARAQVmvdJ2y/+3LP1XDdddd53Xa5XJKkX//61xo8eHCdj+nWrZvX7UDNDrQEhAkAv2nfvr3atm2rI0eONMnPqzlz8cUXX9TaVlRUVK99dO3aVZLUqlUr/fCHP/TfcAB8wjUmAPzGarVq+PDh2rVrV50fOe/vMwqdOnVSr1699Prrr6u0tNRz/969e3X06NF67aNDhw7q37+/Nm3apDNnztTaztuAgabFGRMAfvUf//Ef2rt3rzIzMzV69GjFxsbqq6++Un5+vl5++eWr8vMmTpyosWPH6u6779b58+e1ceNG3XTTTbpw4UK99jF37lyNHTtWd9xxh0aPHq2uXbvq66+/1ocffqji4mK98cYbfp8bQN0IEwB+FRkZqc2bN2vZsmX605/+pLKyMkVGRiolJaXW9R3+kJKSomXLliknJ0dLlixRt27dtGjRIu3cuVN///vf67WPHj166LXXXtOKFSv0+uuv6/z582rfvr169+6tSZMm+X1mAJdncXO1FgAAMATXmAAAAGMQJgAAwBiECQAAMAZhAgAAjEGYAAAAYxAmAADAGIQJAAAwBmECAACMQZgAAABjECYAAMAYhAkAADAGYQIAAIxBmAAAAGP8/3FPV94cxommAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.countplot(x='children', data=insurance_dataset)\n",
        "plt.title('Children')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lEQxQL4eDZzy",
        "outputId": "7786abfe-8c4e-44b8-ef19-56a6755da8f1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    574\n",
              "1    324\n",
              "2    240\n",
              "3    157\n",
              "4     25\n",
              "5     18\n",
              "Name: children, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ],
      "source": [
        "insurance_dataset['children'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "gsXAxqjIDaSN",
        "outputId": "bddba3ea-2a32-46a3-d504-652911bcc945"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(3,4))\n",
        "sns.countplot(x='smoker', data=insurance_dataset)\n",
        "plt.title('Smoker')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9A4yWM7KDbhI",
        "outputId": "bead8410-a3af-4c15-e1fb-7fe97d2cac80"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "no     1064\n",
              "yes     274\n",
              "Name: smoker, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "source": [
        "insurance_dataset['smoker'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "a6i79SMIDe4o",
        "outputId": "173a42fe-7867-4649-9017-daad2be3749b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.countplot(x='region', data=insurance_dataset)\n",
        "plt.title('Region')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fgj1VnisDgCT",
        "outputId": "d4daa3bd-6cfc-4cce-b47a-2735fe73cb82"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "southeast    364\n",
              "southwest    325\n",
              "northwest    325\n",
              "northeast    324\n",
              "Name: region, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "insurance_dataset['region'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 762
        },
        "id": "r16wCczvDkae",
        "outputId": "4463dc7c-daaf-492a-ad8c-87ba5c8c2293"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-54-1b2d165102a3>:3: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(insurance_dataset['charges'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.set()\n",
        "plt.figure(figsize=(6,6))\n",
        "sns.distplot(insurance_dataset['charges'])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Aw7ZXpB1Dm82",
        "outputId": "e867edde-39c2-470a-bb9c-2d20468065bd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1639.56310     2\n",
              "16884.92400    1\n",
              "29330.98315    1\n",
              "2221.56445     1\n",
              "19798.05455    1\n",
              "              ..\n",
              "7345.08400     1\n",
              "26109.32905    1\n",
              "28287.89766    1\n",
              "1149.39590     1\n",
              "29141.36030    1\n",
              "Name: charges, Length: 1337, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ],
      "source": [
        "insurance_dataset['charges'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BHyPoL7oDofn"
      },
      "outputs": [],
      "source": [
        "insurance_dataset.replace({'sex': {'male': 0, 'female': 1}}, inplace=True)\n",
        "insurance_dataset.replace({'smoker': {'yes': 0, 'no': 1}}, inplace=True)\n",
        "insurance_dataset.replace({'region': {'southeast': 0, 'southwest': 1, 'northeast': 2, 'northwest': 3}}, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ETcrd0bTDtkp",
        "outputId": "71cfdb8b-8559-4042-cb7c-bc71baf3dd82"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age  sex     bmi  children  smoker  region      charges\n",
              "0   19    1  27.900         0       0       1  16884.92400\n",
              "1   18    0  33.770         1       1       0   1725.55230\n",
              "2   28    0  33.000         3       1       0   4449.46200\n",
              "3   33    0  22.705         0       1       3  21984.47061\n",
              "4   32    0  28.880         0       1       3   3866.85520"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7e7b9994-799f-4d8b-9093-8820b10a6066\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>1</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>0</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e7b9994-799f-4d8b-9093-8820b10a6066')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e7b9994-799f-4d8b-9093-8820b10a6066 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e7b9994-799f-4d8b-9093-8820b10a6066');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-15fe886c-742b-4d4c-a5bf-5359d86a481c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-15fe886c-742b-4d4c-a5bf-5359d86a481c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-15fe886c-742b-4d4c-a5bf-5359d86a481c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ],
      "source": [
        "insurance_dataset.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u3oZR6v-DvLr"
      },
      "outputs": [],
      "source": [
        "x = insurance_dataset.drop(columns='charges', axis=1)\n",
        "y = insurance_dataset['charges']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XZu9VbcZDwVu",
        "outputId": "ca8187b7-fa8f-4f2d-f6b5-ca7a759f2d8c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      age  sex     bmi  children  smoker  region\n",
            "0      19    1  27.900         0       0       1\n",
            "1      18    0  33.770         1       1       0\n",
            "2      28    0  33.000         3       1       0\n",
            "3      33    0  22.705         0       1       3\n",
            "4      32    0  28.880         0       1       3\n",
            "...   ...  ...     ...       ...     ...     ...\n",
            "1333   50    0  30.970         3       1       3\n",
            "1334   18    1  31.920         0       1       2\n",
            "1335   18    1  36.850         0       1       0\n",
            "1336   21    1  25.800         0       1       1\n",
            "1337   61    1  29.070         0       0       3\n",
            "\n",
            "[1338 rows x 6 columns]\n"
          ]
        }
      ],
      "source": [
        "print(x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_8cT7pLDxnl",
        "outputId": "e02c3fc0-061d-464c-c48a-4bad0e967211"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       16884.92400\n",
            "1        1725.55230\n",
            "2        4449.46200\n",
            "3       21984.47061\n",
            "4        3866.85520\n",
            "           ...     \n",
            "1333    10600.54830\n",
            "1334     2205.98080\n",
            "1335     1629.83350\n",
            "1336     2007.94500\n",
            "1337    29141.36030\n",
            "Name: charges, Length: 1338, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "print(y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sdsZ2ucCD1Z4"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lg = LinearRegression()\n",
        "lg.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "CbKuNw0RbdEv",
        "outputId": "06639f62-3771-4529-91bd-20172df874c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "APn6PieDD8oK",
        "outputId": "c98978d3-3d6f-4096-e687-6a24b0998825"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R2 Score: 0.7064951721664847\n"
          ]
        }
      ],
      "source": [
        "y_pred = lg.predict(X_test)\n",
        "print(\"R2 Score:\", r2_score(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "SzJx6zAaD-4x",
        "outputId": "4ad0a4bb-b5d2-4ab1-fc56-8a9abb801fcf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      age  sex     bmi  children  smoker  region      charges\n",
              "0      19    1  27.900         0       0       1  16884.92400\n",
              "1      18    0  33.770         1       1       0   1725.55230\n",
              "2      28    0  33.000         3       1       0   4449.46200\n",
              "3      33    0  22.705         0       1       3  21984.47061\n",
              "4      32    0  28.880         0       1       3   3866.85520\n",
              "...   ...  ...     ...       ...     ...     ...          ...\n",
              "1333   50    0  30.970         3       1       3  10600.54830\n",
              "1334   18    1  31.920         0       1       2   2205.98080\n",
              "1335   18    1  36.850         0       1       0   1629.83350\n",
              "1336   21    1  25.800         0       1       1   2007.94500\n",
              "1337   61    1  29.070         0       0       3  29141.36030\n",
              "\n",
              "[1338 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-59f85003-d97a-46f8-9637-8065769865ec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>1</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>0</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>50</td>\n",
              "      <td>0</td>\n",
              "      <td>30.970</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>10600.54830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>31.920</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2205.98080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>36.850</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1629.83350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>21</td>\n",
              "      <td>1</td>\n",
              "      <td>25.800</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2007.94500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>29.070</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>29141.36030</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1338 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59f85003-d97a-46f8-9637-8065769865ec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-59f85003-d97a-46f8-9637-8065769865ec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-59f85003-d97a-46f8-9637-8065769865ec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-108c5c15-e06e-4fe1-8607-ceb5520fa989\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-108c5c15-e06e-4fe1-8607-ceb5520fa989')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-108c5c15-e06e-4fe1-8607-ceb5520fa989 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f4290aa8-860a-45b6-af0b-1e6330542557\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('insurance_dataset')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f4290aa8-860a-45b6-af0b-1e6330542557 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('insurance_dataset');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "r2_score(y_test, y_pred)\n",
        "insurance_dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NDClgf1QEASO",
        "outputId": "0bce1dfa-7004-43d9-f37f-9f49c366470f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "#Input Data          Age,   sex,   bmi,   children,   smoker, region\n",
        "input_df = np.array([32,     0,   28.880,     0,         1,      3]).reshape(1, -1)\n",
        "prediction = lg.predict(input_df)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Your Medical Insurance Cost Is:\", prediction[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iAAUaREhcDky",
        "outputId": "b7f01f3b-d253-41ce-f3df-95534e4656a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Your Medical Insurance Cost Is: 5697.895975886304\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMBLoUGCwzjUB7PbqnrBkz+",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}